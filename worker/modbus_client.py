from typing import Optional
from loguru import logger
from pymodbus.client import AsyncModbusTcpClient

error_count = 0

_modbus_client_instance: Optional[AsyncModbusTcpClient] = None

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Modbus
MODBUS_IP = "91.203.25.12"
MODBUS_PORT = 502
BATTERY_ID = 225
INVERTER_ID = 100
ESS_UNIT_ID = 227
SOLAR_CHARGER_SLAVE_IDS = list(range(1, 14)) + [100]

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ Modbus 
REGISTERS = {
    "soc": 266,
    "voltage": 259,
    "current": 261,
    "temperature": 262,
    "power": 258,
    "soh": 304,
}

INVERTER_REGISTERS = {
    "inverter_power": 870,
    "output_power_l1": 878,
    "output_power_l2": 880,
    "output_power_l3": 882,
}

ESS_REGISTERS_MODE = {
    "switch_position": 33,
}

ESS_REGISTERS_FLAGS = {
    "disable_charge": 38,
    "disable_feed": 39,
    "disable_pv_inverter": 56,
    "do_not_feed_in_ov": 65,
    "setpoints_as_limit": 71,
    "ov_offset_mode": 72,
    "prefer_renewable": 102,
}

ESS_REGISTERS_POWER = {
    "ess_power_setpoint_l1": 96,
    "ess_power_setpoint_l2": 98,
    "ess_power_setpoint_l3": 100,
    "max_feed_in_l1": 66,
    "max_feed_in_l2": 67,
    "max_feed_in_l3": 68,
}

ESS_REGISTERS_ALARMS = {
    "temperature_alarm": 34,
    "low_battery_alarm": 35,
    "overload_alarm": 36,
    "temp_sensor_alarm": 42,
    "voltage_sensor_alarm": 43,
    "grid_lost": 64,
}


async def create_modbus_client_singleton() -> Optional[AsyncModbusTcpClient]:
    """
    –°–æ–∑–¥–∞—ë—Ç –∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç Modbus-–∫–ª–∏–µ–Ω—Ç.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞.
    """
    global _modbus_client_instance
    try:
        if _modbus_client_instance and _modbus_client_instance.connected:
            logger.info("üîå Modbus –∫–ª–∏–µ–Ω—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.")
            return _modbus_client_instance
        if _modbus_client_instance:
            try:
                await _modbus_client_instance.close()
                logger.info("üîå –°—Ç–∞—Ä—ã–π Modbus –∫–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º.")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ Modbus –∫–ª–∏–µ–Ω—Ç–∞: {e}")

        logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Modbus —Å–µ—Ä–≤–µ—Ä—É...")
        new_client = AsyncModbusTcpClient(host=MODBUS_IP, port=MODBUS_PORT, timeout=5)
        await new_client.connect()

        if not new_client.connected:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Modbus —Å–µ—Ä–≤–µ—Ä—É.")
            _modbus_client_instance = None  
        else:
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Modbus —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
            _modbus_client_instance = new_client
        
        return _modbus_client_instance
    except Exception as e:
        logger.exception("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ Modbus –∫–ª–∏–µ–Ω—Ç–∞", exc_info=e)
        _modbus_client_instance = None  
        return None 


async def get_modbus_client_singleton() -> Optional[AsyncModbusTcpClient]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π Modbus –∫–ª–∏–µ–Ω—Ç. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω,
    –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å/–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å.
    """
    global _modbus_client_instance
    if _modbus_client_instance and _modbus_client_instance.connected:
        return _modbus_client_instance
    
    logger.warning("üîÑ Modbus –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è/–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
    return await create_modbus_client_singleton()


def register_modbus_error():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É Modbus –∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ—Ç —Å—á—ë—Ç—á–∏–∫."""
    global error_count
    error_count += 1
    logger.warning(f"‚ùó Modbus –æ—à–∏–±–∫–∞ #{error_count}")


def decode_signed_16(value: int) -> int:
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç 16-–±–∏—Ç–Ω–æ–µ –∑–Ω–∞–∫–æ–≤–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ."""
    return value - 0x10000 if value >= 0x8000 else value


def decode_signed_32(high: int, low: int) -> int:
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç 32-–±–∏—Ç–Ω–æ–µ –∑–Ω–∞–∫–æ–≤–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏–∑ –¥–≤—É—Ö 16-–±–∏—Ç–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤."""
    combined = (high << 16) | low
    return combined - 0x100000000 if combined >= 0x80000000 else combined