# build
#    docker compose --env-file corid_env build --with-dependencies 
# run
#    docker compose --env-file corid_env up 


name: $CORID_ENV-cor-id_v2


services:
  fastapi:
    privileged: true
#    security_opt:
#      - apparmor:unconfined
    build:
      context: .
      dockerfile: Dockerfile
    image: massivecapybara/corid_api:latest
    container_name: $CORID_ENV-fastapi
    ports:
      - "$CORID_API_PORT:8000"
    depends_on:
      - prometheus
      - postgres
    env_file:
      - $CORID_ENV-corid.cor-medical.ua.env
#    volumes:
#      - dicom-storage:/$SCAN_DIR
    logging:
      driver: json-file
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
        max-size: "10m"
        max-file: "3"
    command: gunicorn main:app --workers 1 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000 --log-level info --error-logfile - --access-logfile -
    restart: unless-stopped
  # modbus_worker:
  #     build:
  #       context: . 
  #       dockerfile: Dockerfile.modbus_worker
  #     image: modbus-worker:latest 
  #     container_name: $CORID_ENV-modbus_worker 
  #     env_file:
  #       - $CORID_ENV-corid.cor-medical.ua.env
  #     depends_on:
  #       - postgres 

  #     restart: unless-stopped
  scanner_worker:
    build:
      context: .
      dockerfile: Dockerfile.scanner_worker
    image: scanner_worker:latest
    container_name: $CORID_ENV-scanner_worker
    restart: unless-stopped
    volumes:
      - .:/app
    # network_mode: "host"
    env_file:
      - $CORID_ENV-corid.cor-medical.ua.env
    depends_on:
      - postgres 
  redis:
    image: redis:alpine
    container_name: $CORID_ENV-redis
    ports:
      - $CORID_REDIS_PORT:6379
    restart: unless-stopped


  postgres:
    image: postgres:latest
    container_name: $CORID_ENV-postgres
    env_file:
      - $CORID_ENV-corid.cor-medical.ua.env
    ports:
      - $CORID_POSTGRES_PORT:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command: postgres -c max_connections=300
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: $CORID_ENV-prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheusdata:/prometheus
    ports:
      - $CORID_PROMETEUS_PORT:9090
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: $CORID_ENV-grafana
    ports:
      - $CORID_GRAFANA_PORT:3000
    volumes:
      - ${PWD}/grafana.ini.$CORID_ENV:/etc/grafana/grafana.ini
      - grafana-storage:/var/lib/grafana 
    depends_on:
      - loki
    restart: unless-stopped

  loki:
    image: grafana/loki:latest
    container_name: $CORID_ENV-loki
    ports:
      - $CORID_LOKI_PORT:3100
    command: -config.file=/etc/loki/local-config.yaml
    user: "0:0"
    volumes:
      - ./loki-config.yaml:/etc/loki/loki-config.yaml
      - ./:/app
      - loki-data:/wal
      - compactor-data:/tmp/loki/compactor
    restart: unless-stopped

  promtail:
    image: grafana/promtail:latest
    container_name: $CORID_ENV-promtail
    ports:
      - $CORID_PROMTAIL_PORT:9080
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro 
      - /var/run/docker.sock:/var/run/docker.sock:ro 
      - /var/log:/var/log
      - ./:/app
      - ./promtail-config.yaml:/etc/promtail/config.yaml
    command: -config.file=/etc/promtail/config.yaml
    depends_on:
      - loki
    restart: unless-stopped

volumes:
  postgres_data:
  grafana-storage:
  loki-data:
  compactor-data:
  prometheusdata:
#  dicom-storage:
#    driver: local
#    driver_opts:
#      type: cifs
#      device: "$SCAN_UNC/$SCAN_UNC_DIR"
#      o: "username=$SCAN_USER,password=$SCAN_USER"