


function initScheduleTable() {
    renderScheduleTable();
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
function renderScheduleTable() {
    const tbody = document.getElementById('scheduleTableBody');
    tbody.innerHTML = '';
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
    schedulePeriods.sort((a, b) => {
        if (a.startHour === b.startHour) {
            return a.startMinute - b.startMinute;
        }
        return a.startHour - b.startHour;
    });
    
    schedulePeriods.forEach((period, index) => {
        const row = document.createElement('tr');
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
        const endTime = calculateEndTime(
            period.startHour, 
            period.startMinute, 
            period.durationHour, 
            period.durationMinute
        );
        
        row.innerHTML = `
            <td>${index + 1}</td>
            <td>
                <input type="number" class="time-input" min="0" max="23" value="${period.startHour}" 
                    onchange="updateSchedulePeriod(${period.id}, 'startHour', this.value)"> :
                <input type="number" class="time-input" min="0" max="59" value="${period.startMinute}" 
                    onchange="updateSchedulePeriod(${period.id}, 'startMinute', this.value)">
            </td>
            <td>
                <input type="number" class="time-input" min="0" max="23" value="${period.durationHour}" 
                    onchange="updateSchedulePeriod(${period.id}, 'durationHour', this.value)"> —á
                <input type="number" class="time-input" min="0" max="59" value="${period.durationMinute}" 
                    onchange="updateSchedulePeriod(${period.id}, 'durationMinute', this.value)"> –º
            </td>
            <td>${endTime.hour}:${endTime.minute.toString().padStart(2, '0')}</td>
            <td>
                <input type="number" class="kw-input" min="0" max="100" step="0.1" value="${period.feedIn}" 
                    onchange="updateSchedulePeriod(${period.id}, 'feedIn', this.value)">
            </td>
            <td>
                <input type="number" class="percent-input" min="0" max="100" value="${period.batteryLevel}" 
                    onchange="updateSchedulePeriod(${period.id}, 'batteryLevel', this.value)">
            </td>
            <td>
                <select class="toggle-active" onchange="updateSchedulePeriod(${period.id}, 'chargeEnabled', this.value === 'true')">
                    <option value="true" ${period.chargeEnabled ? 'selected' : ''}>–í–∫–ª</option>
                    <option value="false" ${!period.chargeEnabled ? 'selected' : ''}>–í—ã–∫–ª</option>
                </select>
            </td>
            <td>
                <select class="toggle-active" onchange="updateSchedulePeriod(${period.id}, 'active', this.value === 'true')">
                    <option value="true" ${period.active ? 'selected' : ''}>–í–∫–ª</option>
                    <option value="false" ${!period.active ? 'selected' : ''}>–í—ã–∫–ª</option>
                </select>
            </td>
            <td>
                <button onclick="saveSchedulePeriod(${period.id})" class="action-btn save-btn" title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å">üíæ</button>
                <button onclick="deleteSchedulePeriod(${period.id})" class="action-btn delete-btn" title="–£–¥–∞–ª–∏—Ç—å">‚ùå</button>
            </td>
        `;
        
        tbody.appendChild(row);
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    document.getElementById('toggleScheduleBtn').textContent = 
        scheduleEnabled ? '–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ' : '–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ';
        renderTimeline(); 
}

// –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
function calculateEndTime(startHour, startMinute, durationHour, durationMinute) {
    let endHour = startHour + durationHour;
    let endMinute = startMinute + durationMinute;
    
    if (endMinute >= 60) {
        endHour += Math.floor(endMinute / 60);
        endMinute = endMinute % 60;
    }
    
    endHour = endHour % 24;
    
    return {
        hour: endHour,
        minute: endMinute
    };
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
function addSchedulePeriod() {
    if (schedulePeriods.length >= 10) {
        alert('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–∏–æ–¥–æ–≤ - 10');
        return;
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID
    const maxId = schedulePeriods.reduce((max, period) => Math.max(max, period.id), 0);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    const newPeriod = {
        id: maxId + 1,
        startHour: 0,
        startMinute: 0,
        durationHour: 1,
        durationMinute: 0,
        feedIn: 0,
        batteryLevel: 50,
        chargeEnabled: true,
        active: true
    };
    
    schedulePeriods.push(newPeriod);
    renderScheduleTable();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–µ—Ä–∏–æ–¥–∞
function updateSchedulePeriod(id, field, value) {
    const period = schedulePeriods.find(p => p.id === id);
    if (!period) return;
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω—ã–π —Ç–∏–ø
    let convertedValue;
    if (field === 'chargeEnabled' || field === 'active') {
        convertedValue = value === 'true';
    } else {
        convertedValue = Number(value);
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
    if (field === 'startHour' && (convertedValue < 0 || convertedValue > 23)) {
        return;
    }
    if ((field === 'startMinute' || field === 'durationMinute') && (convertedValue < 0 || convertedValue > 59)) {
        return;
    }
    if (field === 'durationHour' && convertedValue < 0) {
        return;
    }
    if (field === 'batteryLevel' && (convertedValue < 0 || convertedValue > 100)) {
        return;
    }
    
    period[field] = convertedValue;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ (–æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä)
function saveSchedulePeriod(id) {
    const period = schedulePeriods.find(p => p.id === id);
    if (!period) return;
    
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞:', period);
    
    // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É
    renderScheduleTable();
    alert('–ü–µ—Ä–∏–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞
function deleteSchedulePeriod(id) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥?')) {
        return;
    }
    
    schedulePeriods = schedulePeriods.filter(p => p.id !== id);
    renderScheduleTable();
    
    // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–æ–≤ API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    console.log('–ü–µ—Ä–∏–æ–¥ —É–¥–∞–ª–µ–Ω:', id);
}

// –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
function toggleSchedule() {
    scheduleEnabled = !scheduleEnabled;
    renderScheduleTable();
    
    // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–æ–≤ API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    console.log('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', scheduleEnabled ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–æ—Ç–∫–ª—é—á–µ–Ω–æ');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', initScheduleTable);


function renderTimeline() {
    const container = document.getElementById('timelinePeriods');
    const hoursContainer = document.getElementById('timelineHours');
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    container.innerHTML = '';
    hoursContainer.innerHTML = '';
    
    // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—ã (00:00 - 23:00)
    for (let i = 0; i < 24; i++) {
        const hourElem = document.createElement('div');
        hourElem.className = 'timeline-hour';
        hourElem.textContent = `${i.toString().padStart(2, '0')}:00`;
        hoursContainer.appendChild(hourElem);
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —à–∞–≥–∞ –≤—ã—Å–æ—Ç—ã
    const activePeriodsCount = schedulePeriods.filter(p => p.active).length;
    const heightStep = activePeriodsCount > 0 ? 100 / (activePeriodsCount + 1) : 0;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥—ã
    let periodIndex = 0;
    schedulePeriods.forEach((period, index) => {
        if (!period.active) return;
        
        const startMinutes = period.startHour * 60 + period.startMinute;
        const endMinutes = startMinutes + period.durationHour * 60 + period.durationMinute;
        
        const periodElem = document.createElement('div');
        periodElem.className = 'timeline-period';
        periodElem.title = `–ü–µ—Ä–∏–æ–¥ ${index + 1}: ${period.startHour}:${period.startMinute.toString().padStart(2, '0')} - ${calculateEndTime(period.startHour, period.startMinute, period.durationHour, period.durationMinute).hour}:${calculateEndTime(period.startHour, period.startMinute, period.durationHour, period.durationMinute).minute.toString().padStart(2, '0')}`;
        
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑–º–µ—Ä
        periodElem.style.left = `${(startMinutes / 1440) * 100}%`;
        periodElem.style.width = `${((endMinutes - startMinutes) / 1440) * 100}%`;
        periodElem.style.backgroundColor = periodColors[index % periodColors.length];
        
        // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        const fixedHeight = 8; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
        periodElem.style.height = `${fixedHeight}px`;
        
        // –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ç –Ω–∏–∑–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞
        const bottomPosition = 5 + (periodIndex * heightStep);
        periodElem.style.bottom = `${bottomPosition}%`;
        periodElem.setAttribute('data-tooltip', 
            `–ü–µ—Ä–∏–æ–¥ ${index + 1}\n` +
            `–ù–∞—á–∞–ª–æ: ${period.startHour}:${period.startMinute.toString().padStart(2, '0')}\n` +
            `–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${period.durationHour}—á ${period.durationMinute}–º\n` +
            `–ú–æ—â–Ω–æ—Å—Ç—å: ${period.feedIn} –∫–í—Ç\n` +
            `–ó–∞—Ä—è–¥: ${period.chargeEnabled ? '–í–∫–ª' : '–í—ã–∫–ª'}`
        );
        // –ö–ª–∏–∫ –ø–æ –ø–µ—Ä–∏–æ–¥—É –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
        periodElem.addEventListener('click', () => {
            const rows = document.querySelectorAll('#scheduleTableBody tr');
            if (rows[index]) {
                rows[index].style.backgroundColor = '#ffff99';
                setTimeout(() => {
                    rows[index].style.backgroundColor = '';
                }, 2500);
                rows[index].scrollIntoView({ behavior: 'smooth', block: 'nearest' });
            }

           
        });
        
        container.appendChild(periodElem);
        periodIndex++;
    });
}



    