"""add is_active to EnergeticObject  v1.1.16

Revision ID: fa39f9edfd59
Revises: 303b76e9e2f9
Create Date: 2025-09-22 13:42:34.039999

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'fa39f9edfd59'
down_revision: Union[str, None] = '303b76e9e2f9'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('cerbo_measurements', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='Дата и время сохранения записи в БД',
               existing_nullable=False)
    op.alter_column('cerbo_measurements', 'measured_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='Дата и время измерения',
               existing_comment='Дата и время измерения, полученное с устройства',
               existing_nullable=False)
    op.create_index(op.f('ix_cerbo_measurements_energetic_object_id'), 'cerbo_measurements', ['energetic_object_id'], unique=False)
    op.drop_constraint('fk_cerbo_measurements_energetic_object', 'cerbo_measurements', type_='foreignkey')
    op.create_foreign_key(None, 'cerbo_measurements', 'energetic_objects', ['energetic_object_id'], ['id'])
    op.add_column('energetic_objects', sa.Column('is_active', sa.Boolean(), nullable=True, comment='Активен ли фоновый опрос'))
    op.alter_column('energetic_objects', 'name',
               existing_type=sa.VARCHAR(),
               comment='Имя/название объекта',
               existing_nullable=False)
    op.alter_column('energetic_objects', 'description',
               existing_type=sa.VARCHAR(),
               comment='Описание объекта',
               existing_nullable=True)
    op.alter_column('energetic_objects', 'modbus_registers',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='Карта регистров Modbus (динамическая структура в формате JSON)',
               existing_nullable=True)
    op.alter_column('energetic_schedule', 'duration',
               existing_type=postgresql.INTERVAL(),
               comment='Продолжительность режима',
               existing_comment='Продолжительность режима (например, 2 часа 30 минут)',
               existing_nullable=False)
    op.alter_column('energetic_schedule', 'end_time',
               existing_type=postgresql.TIME(),
               comment='Время окончания работы режима',
               existing_comment='Время окончания работы режима (ЧЧ:ММ)',
               existing_nullable=False)
    op.alter_column('energetic_schedule', 'grid_feed_w',
               existing_type=sa.INTEGER(),
               comment='Отдача в сеть (Вт)',
               existing_comment='Параметр отдачи в сеть (Вт)',
               existing_nullable=False)
    op.alter_column('energetic_schedule', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='Флаг: активно ли это расписание',
               existing_nullable=False)
    op.alter_column('energetic_schedule', 'is_manual_mode',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='Флаг: находится ли инвертор в ручном режиме',
               existing_nullable=False)
    op.alter_column('energetic_schedule', 'charge_battery_value',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='заряжать батарею в этом режиме с каким то током',
               existing_nullable=False,
               existing_server_default=sa.text('300'))
    op.create_index(op.f('ix_energetic_schedule_energetic_object_id'), 'energetic_schedule', ['energetic_object_id'], unique=False)
    op.drop_constraint('fk_energetic_schedule_energetic_object', 'energetic_schedule', type_='foreignkey')
    op.create_foreign_key(None, 'energetic_schedule', 'energetic_objects', ['energetic_object_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'energetic_schedule', type_='foreignkey')
    op.create_foreign_key('fk_energetic_schedule_energetic_object', 'energetic_schedule', 'energetic_objects', ['energetic_object_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_energetic_schedule_energetic_object_id'), table_name='energetic_schedule')
    op.alter_column('energetic_schedule', 'charge_battery_value',
               existing_type=sa.INTEGER(),
               comment='заряжать батарею в этом режиме с каким то током',
               existing_nullable=False,
               existing_server_default=sa.text('300'))
    op.alter_column('energetic_schedule', 'is_manual_mode',
               existing_type=sa.BOOLEAN(),
               comment='Флаг: находится ли инвертор в ручном режиме',
               existing_nullable=False)
    op.alter_column('energetic_schedule', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment='Флаг: активно ли это расписание',
               existing_nullable=False)
    op.alter_column('energetic_schedule', 'grid_feed_w',
               existing_type=sa.INTEGER(),
               comment='Параметр отдачи в сеть (Вт)',
               existing_comment='Отдача в сеть (Вт)',
               existing_nullable=False)
    op.alter_column('energetic_schedule', 'end_time',
               existing_type=postgresql.TIME(),
               comment='Время окончания работы режима (ЧЧ:ММ)',
               existing_comment='Время окончания работы режима',
               existing_nullable=False)
    op.alter_column('energetic_schedule', 'duration',
               existing_type=postgresql.INTERVAL(),
               comment='Продолжительность режима (например, 2 часа 30 минут)',
               existing_comment='Продолжительность режима',
               existing_nullable=False)
    op.alter_column('energetic_objects', 'modbus_registers',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='Карта регистров Modbus (динамическая структура в формате JSON)',
               existing_nullable=True)
    op.alter_column('energetic_objects', 'description',
               existing_type=sa.VARCHAR(),
               comment=None,
               existing_comment='Описание объекта',
               existing_nullable=True)
    op.alter_column('energetic_objects', 'name',
               existing_type=sa.VARCHAR(),
               comment=None,
               existing_comment='Имя/название объекта',
               existing_nullable=False)
    op.drop_column('energetic_objects', 'is_active')
    op.drop_constraint(None, 'cerbo_measurements', type_='foreignkey')
    op.create_foreign_key('fk_cerbo_measurements_energetic_object', 'cerbo_measurements', 'energetic_objects', ['energetic_object_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_cerbo_measurements_energetic_object_id'), table_name='cerbo_measurements')
    op.alter_column('cerbo_measurements', 'measured_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='Дата и время измерения, полученное с устройства',
               existing_comment='Дата и время измерения',
               existing_nullable=False)
    op.alter_column('cerbo_measurements', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='Дата и время сохранения записи в БД',
               existing_nullable=False)
    # ### end Alembic commands ###
